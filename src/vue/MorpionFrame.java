/*
 * MorpionFrame.java                  23/11/2015
 */
package vue;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import controleur.MorpionControl;
import modele.MorpionModel;
import controleur.NouvellePartieControl;
import controleur.Observateur;

/**
 * Application du patron de conception MVC à l’application Morpion
 * @author Alicia MASMAYOUX
 */
public class MorpionFrame extends javax.swing.JFrame implements Observateur{

    // Les trois images pour decorer les cases du jeu
    public static final ImageIcon BLANC = new ImageIcon("./src/imgs/blanc.jpg");
    public static final ImageIcon CROIX = new ImageIcon("./src/imgs/croix.jpg");
    public static final ImageIcon ROND = new ImageIcon("./src/imgs/rond.jpg");

    private static final int taille = 3;
        
    // Les Cases et boutons
    JButton btnQuitter = new JButton("Q");
    JButton btnNouvelle = new JButton("N");
    JLabel nextPlayer = new JLabel(CROIX);
    
    JLabel[][] jboard;

    MorpionModel model;
    
    /**
     * Creates new form MorpionFrame
     * @param m correspond au modèle de la vue
     */
    public MorpionFrame(MorpionModel m) {
        model = m;
        initComponents();
        
        jboard = new JLabel[taille][taille];
        
        for(int i=0;i<taille;i++){
            for(int j=0;j<taille;j++){
                // init case
                jboard[i][j] = new JLabel(BLANC);
                panelJeu.add(jboard[i][j]);
                
                jboard[i][j].addMouseListener(new MorpionControl(model, this, i,j));
            }
        }
        
        panelJeu.add(btnQuitter);
        panelJeu.add(nextPlayer);
        panelJeu.add(btnNouvelle);
        
        btnQuitter.addActionListener(
            new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    quitterEvt(evt);
                }
            });
        
        btnNouvelle.addActionListener(new NouvellePartieControl(model, this));

        this.pack();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelJeu = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelJeu.setLayout(new java.awt.GridLayout(4, 3));

        jMenu1.setText("Jeu");

        jMenuItem1.setText("Nouvelle Partie");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nouvellePartieEvt(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Quitter");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterEvt(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelJeu, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(panelJeu, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void quitterEvt(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterEvt
        System.exit(1);
    }//GEN-LAST:event_quitterEvt

    private void nouvellePartieEvt(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nouvellePartieEvt

    }//GEN-LAST:event_nouvellePartieEvt

    /**
     * Réinitialise le plateau du morpion
     */
    public void reinitialise(){
       for(int i=0;i<taille;i++){
            for(int j=0;j<taille;j++){
                // init case
                jboard[i][j].setIcon(BLANC);
            }
        }  
        nextPlayer.setIcon(CROIX);
    }
    
    /** 
     * Modifie l'icone du nextPlayer en fonction du joueur en cours (de son entier)
     * @param i l'entier correspondant au joueur en cours
     */
    public void setIconFromInt(int i){
        if(i == 1){
            nextPlayer.setIcon(CROIX);
        }else if(i == 2){
            nextPlayer.setIcon(ROND);
        }else{
            nextPlayer.setIcon(BLANC);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel panelJeu;
    // End of variables declaration//GEN-END:variables

    @Override
    public void avertir(int i, int j) {
        if(model.isGagnee()){
            JOptionPane.showMessageDialog(null, "Player " + 
            ((model.getNextPlayer() == 1)? "ROND" : "CROIX") + " gagne !", 
            "Resultats", JOptionPane.INFORMATION_MESSAGE);
            model.nouvellePartie();
            reinitialise();
        }else if(model.getNb_coups() == 9){
            JOptionPane.showMessageDialog(null, "Il n'y a pas de vainqueurs !",
                "Resultats", JOptionPane.INFORMATION_MESSAGE);
            model.nouvellePartie();
            reinitialise();
        }else{
            if(model.getPlatform()[i][j] != 0){
                setPlateformIcon(i, j, model.getPlatform()[i][j]);
            }
            setIconFromInt(model.getNextPlayer());
        }
    }
    
    /**
     * Modifie l'icone de la case cliqué
     * @param i Correspond à l'abscisse de la coordonnée de la case
     * @param j Correspond à l'ordonnée de la coordonnée de la case
     * @param player correspond au jour en cours
     */
    public void setPlateformIcon(int i, int j, int player){
        jboard[i][j].setIcon(player == 1 ? CROIX : ROND);
    }
}